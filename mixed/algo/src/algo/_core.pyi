class Edge:
    def __init__(self, from_: int, to: int) -> None: ...
    def reverse(self) -> Edge: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...

class GraphType:
    OneDirectional: GraphType
    BiDirectional: GraphType

class Graph:
    def __init__(self, graph_type: GraphType) -> None: ...
    def add_edge(self, edge: Edge) -> None: ...
    def add_edge_by_coordinates(self, from_: int, to: int) -> None: ...
    def get_nodes(self) -> set[int]: ...
    def get_edges(self) -> set[Edge]: ...
    def get_edges_from_node(self, node: int) -> set[Edge]: ...
    def get_edges_to_node(self, node: int) -> set[Edge]: ...
    def get_node_neighbours(self, node: int) -> set[int]: ...
    def is_node_exists(self, node: int) -> bool: ...
    def is_edge_exists(self, edge: Edge) -> bool: ...
    def is_edge_exists_by_coordinates(self, from_: int, to: int) -> bool: ...
    def remove_edge(self, edge: Edge) -> None: ...
    def remove_edge_by_coordinates(self, from_: int, to: int) -> None: ...
    def remove_node(self, node: int) -> None: ...

class Direction:
    Up: Direction
    Down: Direction
    Left: Direction
    Right: Direction

class Vector:
    def __init__(self, add_row: int, add_column: int) -> None: ...
    def __add__(self, other: Vector) -> Vector: ...
    def __sub__(self, other: Vector) -> Vector: ...
    def scalar_mul(self, scalar: int) -> Vector: ...
    def inverse(self) -> Vector: ...
    def taxicab_norm(self) -> int: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...

class Position:
    def __init__(self, row: int, column: int) -> None: ...
    def set_new_position(self, vector: Vector) -> None: ...
    def set_new_position_for_direction(self, direction: Direction) -> None: ...
    def get_new_position(self, vector: Vector) -> Position: ...
    def get_new_position_for_direction(self, direction: Direction) -> Position: ...
    def vector_to(self, other: Position) -> Vector: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
