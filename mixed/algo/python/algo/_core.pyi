# This file is automatically generated by pyo3_stub_gen
# ruff: noqa: E501, F401

import builtins
from enum import Enum

import numpy
import numpy.typing

class BoolMatrix:
    def __new__(cls, height:builtins.int, width:builtins.int) -> BoolMatrix: ...
    def __str__(self) -> builtins.str: ...
    def __repr__(self) -> builtins.str: ...
    def get_height(self) -> builtins.int: ...
    def get_width(self) -> builtins.int: ...
    def set_element(self, row:builtins.int, column:builtins.int, value:builtins.bool) -> None: ...
    def set_position_value(self, position:Position, value:builtins.bool) -> None: ...
    def get_element(self, row:builtins.int, column:builtins.int) -> builtins.bool: ...
    def get_position_value(self, position:Position) -> builtins.bool: ...
    def is_in_bounds(self, row:builtins.int, column:builtins.int) -> builtins.bool: ...

class CharMatrix:
    def __new__(cls, height:builtins.int, width:builtins.int) -> CharMatrix: ...
    def __str__(self) -> builtins.str: ...
    def __repr__(self) -> builtins.str: ...
    def get_height(self) -> builtins.int: ...
    def get_width(self) -> builtins.int: ...
    def set_element(self, row:builtins.int, column:builtins.int, value:builtins.str) -> None: ...
    def set_position_value(self, position:Position, value:builtins.str) -> None: ...
    def get_element(self, row:builtins.int, column:builtins.int) -> builtins.str: ...
    def get_position_value(self, position:Position) -> builtins.str: ...
    def is_in_bounds(self, row:builtins.int, column:builtins.int) -> builtins.bool: ...

class Edge:
    def __new__(cls, from_node:builtins.int, to_node:builtins.int) -> Edge: ...
    def __str__(self) -> builtins.str: ...
    def __repr__(self) -> builtins.str: ...
    def reverse(self) -> Edge: ...

class F32Matrix:
    def __new__(cls, height:builtins.int, width:builtins.int) -> F32Matrix: ...
    def __str__(self) -> builtins.str: ...
    def __repr__(self) -> builtins.str: ...
    def get_height(self) -> builtins.int: ...
    def get_width(self) -> builtins.int: ...
    def set_element(self, row:builtins.int, column:builtins.int, value:builtins.float) -> None: ...
    def set_position_value(self, position:Position, value:builtins.float) -> None: ...
    def get_element(self, row:builtins.int, column:builtins.int) -> builtins.float: ...
    def get_position_value(self, position:Position) -> builtins.float: ...
    def is_in_bounds(self, row:builtins.int, column:builtins.int) -> builtins.bool: ...

class F64Matrix:
    def __new__(cls, height:builtins.int, width:builtins.int) -> F64Matrix: ...
    def __str__(self) -> builtins.str: ...
    def __repr__(self) -> builtins.str: ...
    def get_height(self) -> builtins.int: ...
    def get_width(self) -> builtins.int: ...
    def set_element(self, row:builtins.int, column:builtins.int, value:builtins.float) -> None: ...
    def set_position_value(self, position:Position, value:builtins.float) -> None: ...
    def get_element(self, row:builtins.int, column:builtins.int) -> builtins.float: ...
    def get_position_value(self, position:Position) -> builtins.float: ...
    def is_in_bounds(self, row:builtins.int, column:builtins.int) -> builtins.bool: ...

class Graph:
    def __new__(cls, graph_type:GraphType) -> Graph: ...
    def add_node(self, node:builtins.int) -> None: ...
    def add_edge(self, edge:Edge) -> None: ...
    def add_edge_by_coordinates(self, from_node:builtins.int, to_node:builtins.int) -> None: ...
    def remove_node(self, node:builtins.int) -> None: ...
    def remove_edge(self, edge:Edge) -> None: ...
    def remove_edge_by_coordinates(self, from_node:builtins.int, to_node:builtins.int) -> None: ...
    def get_nodes(self) -> builtins.set[builtins.int]: ...
    def get_edges(self) -> builtins.set[Edge]: ...
    def get_edges_from_node(self, node:builtins.int) -> builtins.set[Edge]: ...
    def get_edges_to_node(self, node:builtins.int) -> builtins.set[Edge]: ...
    def get_node_neighbours(self, node:builtins.int) -> builtins.set[builtins.int]: ...
    def is_node_exists(self, node:builtins.int) -> builtins.bool: ...
    def is_edge_exists(self, edge:Edge) -> builtins.bool: ...
    def is_edge_exists_by_coordinates(self, from_node:builtins.int, to_node:builtins.int) -> builtins.bool: ...

class I16Matrix:
    def __new__(cls, height:builtins.int, width:builtins.int) -> I16Matrix: ...
    def __str__(self) -> builtins.str: ...
    def __repr__(self) -> builtins.str: ...
    def get_height(self) -> builtins.int: ...
    def get_width(self) -> builtins.int: ...
    def set_element(self, row:builtins.int, column:builtins.int, value:builtins.int) -> None: ...
    def set_position_value(self, position:Position, value:builtins.int) -> None: ...
    def get_element(self, row:builtins.int, column:builtins.int) -> builtins.int: ...
    def get_position_value(self, position:Position) -> builtins.int: ...
    def is_in_bounds(self, row:builtins.int, column:builtins.int) -> builtins.bool: ...

class I32Matrix:
    def __new__(cls, height:builtins.int, width:builtins.int) -> I32Matrix: ...
    def __str__(self) -> builtins.str: ...
    def __repr__(self) -> builtins.str: ...
    def get_height(self) -> builtins.int: ...
    def get_width(self) -> builtins.int: ...
    def set_element(self, row:builtins.int, column:builtins.int, value:builtins.int) -> None: ...
    def set_position_value(self, position:Position, value:builtins.int) -> None: ...
    def get_element(self, row:builtins.int, column:builtins.int) -> builtins.int: ...
    def get_position_value(self, position:Position) -> builtins.int: ...
    def is_in_bounds(self, row:builtins.int, column:builtins.int) -> builtins.bool: ...

class I64Matrix:
    def __new__(cls, height:builtins.int, width:builtins.int) -> I64Matrix: ...
    def __str__(self) -> builtins.str: ...
    def __repr__(self) -> builtins.str: ...
    def get_height(self) -> builtins.int: ...
    def get_width(self) -> builtins.int: ...
    def set_element(self, row:builtins.int, column:builtins.int, value:builtins.int) -> None: ...
    def set_position_value(self, position:Position, value:builtins.int) -> None: ...
    def get_element(self, row:builtins.int, column:builtins.int) -> builtins.int: ...
    def get_position_value(self, position:Position) -> builtins.int: ...
    def is_in_bounds(self, row:builtins.int, column:builtins.int) -> builtins.bool: ...

class I8Matrix:
    def __new__(cls, height:builtins.int, width:builtins.int) -> I8Matrix: ...
    def __str__(self) -> builtins.str: ...
    def __repr__(self) -> builtins.str: ...
    def get_height(self) -> builtins.int: ...
    def get_width(self) -> builtins.int: ...
    def set_element(self, row:builtins.int, column:builtins.int, value:builtins.int) -> None: ...
    def set_position_value(self, position:Position, value:builtins.int) -> None: ...
    def get_element(self, row:builtins.int, column:builtins.int) -> builtins.int: ...
    def get_position_value(self, position:Position) -> builtins.int: ...
    def is_in_bounds(self, row:builtins.int, column:builtins.int) -> builtins.bool: ...

class Position:
    def __new__(cls, row:builtins.int, column:builtins.int) -> Position: ...
    def __str__(self) -> builtins.str: ...
    def __repr__(self) -> builtins.str: ...
    def get_new_position_with_vector(self, vector:Vector) -> Position: ...
    def get_new_position_with_direction(self, direction:Direction) -> Position: ...
    def set_new_position_with_vector(self, vector:Vector) -> None: ...
    def set_new_position_with_direction(self, direction:Direction) -> None: ...
    def vector_to(self, other:Position) -> Vector: ...

class U16Matrix:
    def __new__(cls, height:builtins.int, width:builtins.int) -> U16Matrix: ...
    def __str__(self) -> builtins.str: ...
    def __repr__(self) -> builtins.str: ...
    def get_height(self) -> builtins.int: ...
    def get_width(self) -> builtins.int: ...
    def set_element(self, row:builtins.int, column:builtins.int, value:builtins.int) -> None: ...
    def set_position_value(self, position:Position, value:builtins.int) -> None: ...
    def get_element(self, row:builtins.int, column:builtins.int) -> builtins.int: ...
    def get_position_value(self, position:Position) -> builtins.int: ...
    def is_in_bounds(self, row:builtins.int, column:builtins.int) -> builtins.bool: ...

class U32Matrix:
    def __new__(cls, height:builtins.int, width:builtins.int) -> U32Matrix: ...
    def __str__(self) -> builtins.str: ...
    def __repr__(self) -> builtins.str: ...
    def get_height(self) -> builtins.int: ...
    def get_width(self) -> builtins.int: ...
    def set_element(self, row:builtins.int, column:builtins.int, value:builtins.int) -> None: ...
    def set_position_value(self, position:Position, value:builtins.int) -> None: ...
    def get_element(self, row:builtins.int, column:builtins.int) -> builtins.int: ...
    def get_position_value(self, position:Position) -> builtins.int: ...
    def is_in_bounds(self, row:builtins.int, column:builtins.int) -> builtins.bool: ...

class U64Matrix:
    def __new__(cls, height:builtins.int, width:builtins.int) -> U64Matrix: ...
    def __str__(self) -> builtins.str: ...
    def __repr__(self) -> builtins.str: ...
    def get_height(self) -> builtins.int: ...
    def get_width(self) -> builtins.int: ...
    def set_element(self, row:builtins.int, column:builtins.int, value:builtins.int) -> None: ...
    def set_position_value(self, position:Position, value:builtins.int) -> None: ...
    def get_element(self, row:builtins.int, column:builtins.int) -> builtins.int: ...
    def get_position_value(self, position:Position) -> builtins.int: ...
    def is_in_bounds(self, row:builtins.int, column:builtins.int) -> builtins.bool: ...

class U8Matrix:
    def __new__(cls, height:builtins.int, width:builtins.int) -> U8Matrix: ...
    def __str__(self) -> builtins.str: ...
    def __repr__(self) -> builtins.str: ...
    def get_height(self) -> builtins.int: ...
    def get_width(self) -> builtins.int: ...
    def set_element(self, row:builtins.int, column:builtins.int, value:builtins.int) -> None: ...
    def set_position_value(self, position:Position, value:builtins.int) -> None: ...
    def get_element(self, row:builtins.int, column:builtins.int) -> builtins.int: ...
    def get_position_value(self, position:Position) -> builtins.int: ...
    def is_in_bounds(self, row:builtins.int, column:builtins.int) -> builtins.bool: ...

class Vector:
    def __new__(cls, add_row:builtins.int, add_column:builtins.int) -> Vector: ...
    def __add__(self, other:Vector) -> Vector: ...
    def __sub__(self, other:Vector) -> Vector: ...
    def __str__(self) -> builtins.str: ...
    def __repr__(self) -> builtins.str: ...
    def scalar_mul(self, scalar:builtins.int) -> Vector: ...
    def inverse(self) -> Vector: ...
    def taxicab_norm(self) -> builtins.int: ...

class Direction(Enum):
    Up = ...
    Down = ...
    Left = ...
    Right = ...

class GraphType(Enum):
    OneDirectional = ...
    BiDirectional = ...

def read_lines_to_vec_f32(file_path:builtins.str) -> numpy.typing.NDArray[numpy.float32]: ...

def read_lines_to_vec_f64(file_path:builtins.str) -> numpy.typing.NDArray[numpy.float64]: ...

def read_lines_to_vec_i16(file_path:builtins.str) -> numpy.typing.NDArray[numpy.int16]: ...

def read_lines_to_vec_i32(file_path:builtins.str) -> numpy.typing.NDArray[numpy.int32]: ...

def read_lines_to_vec_i64(file_path:builtins.str) -> numpy.typing.NDArray[numpy.int64]: ...

def read_lines_to_vec_i8(file_path:builtins.str) -> numpy.typing.NDArray[numpy.int8]: ...

def read_lines_to_vec_u16(file_path:builtins.str) -> numpy.typing.NDArray[numpy.uint16]: ...

def read_lines_to_vec_u32(file_path:builtins.str) -> numpy.typing.NDArray[numpy.uint32]: ...

def read_lines_to_vec_u64(file_path:builtins.str) -> numpy.typing.NDArray[numpy.uint64]: ...

def read_lines_to_vec_u8(file_path:builtins.str) -> numpy.typing.NDArray[numpy.uint8]: ...

